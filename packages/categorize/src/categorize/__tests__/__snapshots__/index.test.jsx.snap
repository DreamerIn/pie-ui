// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`categorize snapshots incorrect 1`] = `
<mockConstructor
  value="1"
>
  <div>
    <_default
      onToggle={[Function]}
      show={false}
      toggled={false}
    />
    <div
      style={
        Object {
          "flexDirection": "column-reverse",
        }
      }
    >
      <WithStyles(Categories)
        categories={Array []}
        grid={
          Object {
            "columns": NaN,
            "rows": NaN,
          }
        }
        model={
          Object {
            "categories": Array [],
            "choices": Array [],
          }
        }
        onDropChoice={[Function]}
        onRemoveChoice={[Function]}
      />
      <WithStyles(Choices)
        choicePosition="above"
        choices={Array []}
        model={
          Object {
            "categories": Array [],
            "choices": Array [],
          }
        }
      />
    </div>
  </div>
</mockConstructor>
`;

exports[`categorize snapshots renders 1`] = `
<mockConstructor
  value="1"
>
  <div>
    <_default
      onToggle={[Function]}
      show={false}
      toggled={false}
    />
    <div
      style={
        Object {
          "flexDirection": "column-reverse",
        }
      }
    >
      <WithStyles(Categories)
        categories={Array []}
        grid={
          Object {
            "columns": NaN,
            "rows": NaN,
          }
        }
        model={
          Object {
            "categories": Array [],
            "choices": Array [],
          }
        }
        onDropChoice={[Function]}
        onRemoveChoice={[Function]}
      />
      <WithStyles(Choices)
        choicePosition="above"
        choices={Array []}
        model={
          Object {
            "categories": Array [],
            "choices": Array [],
          }
        }
      />
    </div>
  </div>
</mockConstructor>
`;

exports[`categorize snapshots renders with feedback 1`] = `
<mockConstructor
  value="1"
>
  <div>
    <_default
      onToggle={[Function]}
      show={false}
      toggled={false}
    />
    <div
      style={
        Object {
          "flexDirection": "column-reverse",
        }
      }
    >
      <WithStyles(Categories)
        categories={Array []}
        grid={
          Object {
            "columns": NaN,
            "rows": NaN,
          }
        }
        model={
          Object {
            "categories": Array [],
            "choices": Array [],
            "correctness": "correct",
            "feedback": Object {
              "correct": Object {
                "default": "Correct",
                "type": "default",
              },
              "incorrect": Object {
                "default": "Incorrect",
                "type": "default",
              },
              "partial": Object {
                "default": "Nearly",
                "type": "default",
              },
            },
          }
        }
        onDropChoice={[Function]}
        onRemoveChoice={[Function]}
      />
      <WithStyles(Choices)
        choicePosition="above"
        choices={Array []}
        model={
          Object {
            "categories": Array [],
            "choices": Array [],
            "correctness": "correct",
            "feedback": Object {
              "correct": Object {
                "default": "Correct",
                "type": "default",
              },
              "incorrect": Object {
                "default": "Incorrect",
                "type": "default",
              },
              "partial": Object {
                "default": "Nearly",
                "type": "default",
              },
            },
          }
        }
      />
    </div>
    <Feedback
      correctness="correct"
      feedback={
        Object {
          "correct": Object {
            "default": "Correct",
            "type": "default",
          },
          "incorrect": Object {
            "default": "Incorrect",
            "type": "default",
          },
          "partial": Object {
            "default": "Nearly",
            "type": "default",
          },
        }
      }
    />
  </div>
</mockConstructor>
`;
