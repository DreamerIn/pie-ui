#!/usr/bin/env node
/* eslint-disable no-console */

const { Commands } = require('@pie-framework/build-helper');
const { resolve } = require('path');
const minimist = require('minimist');
const debug = require('debug');
const cmdLog = debug('pie-ui:scripts:cmd');

const args = minimist(process.argv.slice(2));

class UiCommands extends Commands {
  constructor(root, args) {
    super(root, args);
  }

  babel() {
    console.log('>> babel override for babel 7');
    this.runCmds([
      `${this.p.lerna} exec -- ${
        this.p.babel
      } --ignore '**/__test__/**','**/__tests__/**' src -d lib --copy-files --source-maps --root-mode upward`
    ]);
  }

  buildDemo() {
    cmdLog('----> build-demo');
    const demoDir = resolve(__dirname, '../packages/demo');
    this.runCmds(['rm -rf .out', 'node src/build.js'], { cwd: demoDir });
  }

  deployDemo() {
    cmdLog('----> deploy-demo');

    const dir = resolve(__dirname, '..', 'packages', 'demo', '.out');
    const alias = `pie-ui${args.next ? '-next' : ''}`;
    this.staticToNow(dir, alias);
  }
}

const cmds = new UiCommands(resolve(__dirname, '..'), args);

const knownActions = args._.filter(a => cmds[a]);

if (knownActions.length !== args._.length) {
  throw new Error(`unknown actions: ${args._}`);
}

knownActions.forEach(a => {
  const fn = cmds[a];
  if (!fn) {
    throw new Error('unknown action:', a);
  }
  cmds[a]();
});
